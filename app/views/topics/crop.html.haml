- content_for :title, I18n.translate('topics.crop.title')

- content_for :head do
  = stylesheet_link_tag "jquery.Jcrop"
  = javascript_include_tag "jquery.Jcrop.min"
  :javascript
    function update_crop(panel_id,x,y,w,h) {
      $('#' + panel_id + '-crop_x').val(x.toString());
      $('#' + panel_id + '-crop_y').val(y.toString());
      $('#' + panel_id + '-crop_w').val(w.toString());
      $('#' + panel_id + '-crop_h').val(h.toString());
    }

- content_for :header do
  %h1= t '.title'
  %h2= link_to t('topics.index.title'), topics_path
  %h2= link_to t('show'), @topic
  %h2= link_to t('edit'), edit_topic_path(@topic)

= semantic_form_for new_panel(@topic), :html => { :multipart => true } do |form|
  = form.semantic_fields_for :panels do |panel|
    - panel_id = 'panel' + id_or_new_count(panel.object)
    - panel_javascript = panel_id.gsub(/\W/,'')
    - width = Paperclip::Geometry.from_file(panel.object.panel_source_image.to_file(:original)).width.to_i
    - height = Paperclip::Geometry.from_file(panel.object.panel_source_image.to_file(:original)).height.to_i
    = panel.inputs do
      .row
        .panel.auto-width
          = image_tag panel.object.panel_source_image.url(:original), :id => panel_id, :class => 'stretch'
        .panel.square
          %div{:id => "#{panel_id}-preview", :class => 'preview-image'}
            - url = panel.object.tile_256.url(:original)
            - url = panel.object.image.tile_256.url(:original) if panel.object.tile_256_file_name.nil?
            = image_tag url, :id => panel_id + '-preview-image', :class => 'stretch'
          - arrangement_label = (panel.object.new_record?) ? '' : 'Arrangement'
          = panel.select :arrangement, options_for_select(['square', 'landscape', 'portrait'], panel.object.arrangement), {}, {:id => "#{panel_id}-arrangement"}
          - unless panel.object.new_record?
            = panel.check_box :_destroy
            = panel.label :_destroy, :label => 'Remove'
          - for attribute in [:crop_x, :crop_y, :crop_w, :crop_h]
            = panel.hidden_field attribute, :id => "#{panel_id}-#{attribute}"
      :javascript
        var #{"jcrop_api_#{panel_javascript}"};
        var panel_aspect = 1;
        function #{"resizePreview_#{panel_javascript}"}() {
          var preview_width = $('##{panel_id}-preview').width();
          switch($("##{panel_id}-arrangement").val())
          {
            case 'portrait':
              panel_aspect = 0.5;
              break;
            case 'landscape':
              panel_aspect = 2;
              break;
            default:
              panel_aspect = 1;
              break;
          }
          var preview_height = preview_width / panel_aspect;
          $('##{panel_id}-preview').css({
        	  height: preview_height
        	});
          return preview_height;         
        }
        var #{"showPreview_#{panel_javascript}"} = function(coords)
        {
          var panel_width = $('##{panel_id}').width();
          var panel_height = $('##{panel_id}').height();
          var preview_width = $('##{panel_id}-preview').width();
          var preview_height = #{"resizePreview_#{panel_javascript}"}();

        	var normalized_x = coords.x / panel_width;
        	var normalized_y = coords.y / panel_height;
        	var normalized_w = coords.w / panel_width;
        	var normalized_h = coords.h / panel_height;

          if ( ( coords.w > $('##{panel_id}-preview').width() ) &&
                ( coords.h > $('##{panel_id}-preview').width() * #{height.to_f/width} ) )
          {
          	$('##{panel_id}-preview-image').css({
              width: Math.round(1 / normalized_w * preview_width) + 'px',
              height: Math.round(1 / normalized_h * preview_height) + 'px',
              marginLeft: '-' + Math.round(normalized_x / normalized_w * preview_width) + 'px',  
              marginTop: '-' + Math.round(normalized_y / normalized_h * preview_height) + 'px',
              maxWidth: 'none'
          	});
          	$('##{panel_id}-preview-image').attr('src', '#{ panel.object.image.tile_256.url(:original) }');

          	update_crop('#{panel_id}',
          	  normalized_x, normalized_y, normalized_w, normalized_h);
          }
        };

        var panel_width = $('##{panel_id}').width();
        var panel_height = $('##{panel_id}').height();            
        var select_x = #{panel.object.cropping? ? panel.object.crop_x : 0} * panel_width;
        var select_y = #{panel.object.cropping? ? panel.object.crop_y : 0} * panel_height;
        var select_x2 = select_x + #{panel.object.cropping? ? panel.object.crop_w : 0} * panel_width;
        var select_y2 = select_y + #{panel.object.cropping? ? panel.object.crop_h : 0} * panel_height;

        jQuery(window).bind('load', function() {
          #{"jcrop_api_#{panel_javascript}"} = $.Jcrop('##{panel_id}', {
            onChange: #{"showPreview_#{panel_javascript}"},  
            onSelect: #{"showPreview_#{panel_javascript}"},
            aspectRatio: panel_aspect,
            #{ "setSelect: [select_x, select_y, select_x2, select_y2]" if panel.object.cropping? }
          });
        });
        
        $("##{panel_id}-arrangement").change(function(){
          #{"resizePreview_#{panel_javascript}"}();
          #{"jcrop_api_#{panel_javascript}"}.setOptions({ aspectRatio: panel_aspect });
        });

  .row.footer
    .panel.auto-width.title
      %img.stretch.spacer-1-1{ :src => '/images/spacers/1x1.gif' }
      %img.stretch.spacer-2-1{ :src => '/images/spacers/2x1.gif' }
      %img.stretch.spacer-3-1{ :src => '/images/spacers/3x1.gif' }
      .copy.top
        = form.submit
    .panel.square
      = render :partial => '/layouts/footer_panel'